{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./src/components/b/b.jsx","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["MDXRenderer","require","module","BlogPost","data","allMdx","mdx","site","title","siteMetadata","noSEO","latestSlug","edges","node","fields","slug","frontmatter","description","className","date","body","pageQuery","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,kCCTf,kKAOe,SAASG,EAAT,GAAoD,IAAD,IAA/BC,KAAQC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,KACtD,OACE,kBAAC,IAAD,CACEC,MAAOD,EAAKE,aAAaD,MACzBE,OAAK,EACLC,WAAYN,EAAOO,MAAM,GAAGC,KAAKC,OAAOC,MAExC,kBAAC,IAAD,CACEP,MAAOF,EAAIU,YAAYR,MACvBS,YAAaX,EAAIU,YAAYC,cAE/B,yBAAKC,UAAU,yBACb,6BACE,4BAAQA,UAAU,yBAChB,wBAAIA,UAAU,mBAAmBZ,EAAIU,YAAYR,OACjD,wBAAIU,UAAU,sBAAsBZ,EAAIU,YAAYG,OAEtD,6BAASD,UAAU,4BACjB,kBAAC,cAAD,KAAcZ,EAAIc,UA6CvB,IAAMC,EAAS,a,6xDCtEtB,IAAMC,EAAQrB,EAAd,Q,EACkCA,EAAQ,QAAlCsB,E,EAAAA,iBAAkBjB,E,EAAAA,IAClBkB,EAAgBvB,EAAQ,QAAxBuB,YAERtB,UAAiB,SAAqB,GAKlC,IAJFuB,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBN,EAAtB,GACMO,EAAWN,EAFhB,GAKKO,EAAMT,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMU,EAAS,GAGbV,MAHa,EAIbhB,OAJF,GAQM2B,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAOL,EAAA,mBAA2BI,WAAYG,GAA9C","file":"component---src-components-b-b-jsx-195aaa59c5ca15475ef8.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\n\nimport Layout from \"../layout\"\nimport SEO from \"../seo\"\nexport default function BlogPost({ data: { allMdx, mdx, site } }) {\n  return (\n    <Layout\n      title={site.siteMetadata.title}\n      noSEO\n      latestSlug={allMdx.edges[0].node.fields.slug}\n    >\n      <SEO\n        title={mdx.frontmatter.title}\n        description={mdx.frontmatter.description}\n      />\n      <div className=\"relative pa1 bg-black\">\n        <div>\n          <header className=\"white-80 bg-black ph4\">\n            <h1 className=\"f2 lh-title mb0\">{mdx.frontmatter.title}</h1>\n            <h5 className=\"f5 lh-copy mb0 mt1\">{mdx.frontmatter.date}</h5>\n          </header>\n          <article className=\"white-70 f7 bg-black pa4\">\n            <MDXRenderer>{mdx.body}</MDXRenderer>\n          </article>\n        </div>\n         </div>\n    </Layout>\n  )\n}\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n\n    mdx: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      body: PropTypes.any.isRequired,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              description: PropTypes.string.isRequired,\n            }).isRequired,\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport const pageQuery = graphql`\n  query BlogPostQuery($id: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        title\n        date\n        description\n      }\n    }\n\n    allMdx(limit: 5, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            description\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}